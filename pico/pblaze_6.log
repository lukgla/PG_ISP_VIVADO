KCPSM6 Assembler log file for program 'Z:\home\lukgla\Documents\GitHub\PG_ISP_VIVADO\pico\pblaze_6.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 09 Apr 2024
Assembly timestamp: 18:19:51

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 0BF hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 192
Memory locations available: 3904


Assembly listing

 Addr Code                             Instruction

 000                                   ;
 000                                   ; PiÄty program na Picoblaze
 000                                   ;
 000                                   TABLE 7_segment_decode#, [00000011,10011111,00100101,00001101,10011001,01001001,01000001,00011111,00000001,00010001,00001001,11000001,01100011,10000101,01100001,01110001,11111111]'b
 000                                   ;gment_decode#, [3F,06,5B,4F,66,6D,7D,07,7F,67,77,7C,39,5E,79,71,FF]
 000                                   CONSTANT 7seg_el1_port, 00000001'b
 000                                   CONSTANT 7seg_el2_port, 00000010'b
 000                                   CONSTANT 7seg_el3_port, 00000100'b
 000                                   CONSTANT 7seg_el4_port, 00001000'b
 000                                   CONSTANT state_is_editing, 10000000'b
 000                                   ; -- port is equal to which one is edited right now
 000                                   CONSTANT button_up, 00000010'b
 000                                   CONSTANT button_down, 00000001'b
 000                                   CONSTANT button_edit, 00001000'b
 000                                   CONSTANT button_left, 00001000'b
 000                                   CONSTANT button_right, 00000100'b
 000                                   NAMEREG sE, buttons
 000                                   NAMEREG sF, buttons_old
 000                                   NAMEREG sC, state
 000                                   ; -- internal representation of the number
 000                                   NAMEREG sA, port1
 000                                   NAMEREG sB, port2
 000                                   NAMEREG s9, port3
 000                                   NAMEREG s8, port4
 000                                   NAMEREG s7, selected_number
 000                                   NAMEREG s6, digit_number_7seg
 000                                   NAMEREG s5, button_dif
 000                                   NAMEREG s4, button_up_counter
 000                                   NAMEREG s3, blink_counter
 000  01C01                            LOAD sC[state], 01[7seg_el1_port]
 001                            reset: 
 001                                   ; reset digit to 0000
 001  01700                            LOAD s7[selected_number], 00
 002  200A3                            CALL 0A3[get_digit]                                               ; load 0
 003  2D60F                            OUTPUT s6[digit_number_7seg], 0F[00001111'b]
 004                        loop_main: 
 004  00FE0                            LOAD sF[buttons_old], sE[buttons]
 005                                   ; delay
 005  011FF                            LOAD s1, FF
 006                       delay_loop: 
 006  010FF                            LOAD s0, FF
 007  200BD                            CALL 0BD[delay]
 008  19101                            SUB s1, 01
 009  36006                            JUMP NZ, 006[delay_loop]
 00A                                   ; blink
 00A  20090                            CALL 090[blink_selected]
 00B                                   ; up clock if not zero with bound check
 00B  1D400                            COMPARE s4[button_up_counter], 00
 00C  32010                            JUMP Z, 010[scan_buttons]
 00D  1D4FF                            COMPARE s4[button_up_counter], FF
 00E  32010                            JUMP Z, 010[scan_buttons]
 00F  11401                            ADD s4[button_up_counter], 01
 010                     scan_buttons: 
 010  09E00                            INPUT sE[buttons], 00                                             ; read buttons
 011  005E0                            LOAD s5[button_dif], sE[buttons]
 012  065F0                            XOR s5[button_dif], sF[buttons_old]
 013  32004                            JUMP Z, 004[loop_main]
 014             handle_button_change: 
 014  0DC80                            TEST sC[state], 80[state_is_editing]
 015  32022                            JUMP Z, 022[handle_button_up]
 016                      handle_left: 
 016  01108                            LOAD s1, 08[button_left]
 017  2009B                            CALL 09B[has_button_changed]
 018  3201C                            JUMP Z, 01C[handle_right]
 019  2009D                            CALL 09D[is_button_presed]
 01A  3201C                            JUMP Z, 01C[handle_right]
 01B  20081                            CALL 081[left_shift]
 01C                     handle_right: 
 01C  01104                            LOAD s1, 04[button_right]
 01D  2009B                            CALL 09B[has_button_changed]
 01E  32022                            JUMP Z, 022[handle_button_up]
 01F  2009D                            CALL 09D[is_button_presed]
 020  32022                            JUMP Z, 022[handle_button_up]
 021  20089                            CALL 089[right_shift]
 022                 handle_button_up: 
 022  01102                            LOAD s1, 02[button_up]
 023  2009B                            CALL 09B[has_button_changed]
 024  32037                            JUMP Z, 037[handle_button_down]
 025  2009D                            CALL 09D[is_button_presed]
 026  3A02A                            JUMP C, 02A[handle_button_up_pressed]
 027  2009F                            CALL 09F[is_button_released]
 028  3A02C                            JUMP C, 02C[up_released]
 029  22037                            JUMP 037[handle_button_down]
 02A         handle_button_up_pressed: 
 02A  01401                            LOAD s4[button_up_counter], 01
 02B  22037                            JUMP 037[handle_button_down]
 02C                      up_released: 
 02C  1D4FF                            COMPARE s4[button_up_counter], FF
 02D  01400                            LOAD s4[button_up_counter], 00
 02E  36033                            JUMP NZ, 033[up_short]
 02F                          up_long: 
 02F  07C80                            XOR sC[state], 80[state_is_editing]
 030  000C0                            LOAD s0, sC[state]
 031  20045                            CALL 045[update_pos]                                              ; reset to number blinking
 032  22037                            JUMP 037[handle_button_down]
 033                         up_short: 
 033  0DC80                            TEST sC[state], 80[state_is_editing]
 034  3E037                            JUMP NC, 037[handle_button_down]                                  ;
 035  2005D                            CALL 05D[inc_selected]
 036  22037                            JUMP 037[handle_button_down]
 037               handle_button_down: 
 037  0DC80                            TEST sC[state], 80[state_is_editing]
 038  3A004                            JUMP C, 004[loop_main]
 039  01101                            LOAD s1, 01[button_down]
 03A  2009B                            CALL 09B[has_button_changed]
 03B  32004                            JUMP Z, 004[loop_main]
 03C  2009D                            CALL 09D[is_button_presed]
 03D  3A041                            JUMP C, 041[down_pressed]
 03E  2009F                            CALL 09F[is_button_released]
 03F  3A043                            JUMP C, 043[down_released]
 040  22004                            JUMP 004[loop_main]
 041                     down_pressed: 
 041  2006F                            CALL 06F[dec_selected]
 042  22037                            JUMP 037[handle_button_down]
 043                    down_released: 
 043  22037                            JUMP 037[handle_button_down]
 044  22004                            JUMP 004[loop_main]
 045                       update_pos: 
 045                     update_pos_1: 
 045  0D001                            TEST s0, 01
 046  3204B                            JUMP Z, 04B[update_pos_2]
 047  007A0                            LOAD s7[selected_number], sA[port1]
 048  200A3                            CALL 0A3[get_digit]
 049  2D601                            OUTPUT s6[digit_number_7seg], 01[7seg_el1_port]
 04A  2205C                            JUMP 05C[update_end]
 04B                     update_pos_2: 
 04B  0D002                            TEST s0, 02
 04C  32051                            JUMP Z, 051[update_pos_3]
 04D  007B0                            LOAD s7[selected_number], sB[port2]
 04E  200A3                            CALL 0A3[get_digit]
 04F  2D602                            OUTPUT s6[digit_number_7seg], 02[7seg_el2_port]
 050  2205C                            JUMP 05C[update_end]
 051                     update_pos_3: 
 051  0D004                            TEST s0, 04
 052  32057                            JUMP Z, 057[update_pos_4]
 053  00790                            LOAD s7[selected_number], s9[port3]
 054  200A3                            CALL 0A3[get_digit]
 055  2D604                            OUTPUT s6[digit_number_7seg], 04[7seg_el3_port]
 056  2205C                            JUMP 05C[update_end]
 057                     update_pos_4: 
 057  0D008                            TEST s0, 08
 058  3205C                            JUMP Z, 05C[update_end]
 059  00780                            LOAD s7[selected_number], s8[port4]
 05A  200A3                            CALL 0A3[get_digit]
 05B  2D608                            OUTPUT s6[digit_number_7seg], 08[7seg_el4_port]
 05C                       update_end: 
 05C  25000                            RETURN 
 05D                     inc_selected: 
 05D                   inc_selected_1: 
 05D  0DC01                            TEST sC[state], 01[7seg_el1_port]
 05E  32061                            JUMP Z, 061[inc_selected_2]
 05F  11A01                            ADD sA[port1], 01
 060  03A0F                            AND sA[port1], 0F
 061                   inc_selected_2: 
 061  0DC02                            TEST sC[state], 02[7seg_el2_port]
 062  32065                            JUMP Z, 065[inc_selected_3]
 063  11B01                            ADD sB[port2], 01
 064  03B0F                            AND sB[port2], 0F
 065                   inc_selected_3: 
 065  0DC04                            TEST sC[state], 04[7seg_el3_port]
 066  32069                            JUMP Z, 069[inc_selected_4]
 067  11901                            ADD s9[port3], 01
 068  0390F                            AND s9[port3], 0F
 069                   inc_selected_4: 
 069  0DC08                            TEST sC[state], 08[7seg_el4_port]
 06A  11801                            ADD s8[port4], 01
 06B  0380F                            AND s8[port4], 0F
 06C                          inc_end: 
 06C  000C0                            LOAD s0, sC[state]
 06D  20045                            CALL 045[update_pos]
 06E  25000                            RETURN 
 06F                     dec_selected: 
 06F                   dec_selected_1: 
 06F  0DC01                            TEST sC[state], 01[7seg_el1_port]
 070  32073                            JUMP Z, 073[dec_selected_2]
 071  19A01                            SUB sA[port1], 01
 072  03A0F                            AND sA[port1], 0F
 073                   dec_selected_2: 
 073  0DC02                            TEST sC[state], 02[7seg_el2_port]
 074  32077                            JUMP Z, 077[dec_selected_3]
 075  19B01                            SUB sB[port2], 01
 076  03B0F                            AND sB[port2], 0F
 077                   dec_selected_3: 
 077  0DC04                            TEST sC[state], 04[7seg_el3_port]
 078  3207B                            JUMP Z, 07B[dec_selected_4]
 079  19901                            SUB s9[port3], 01
 07A  0390F                            AND s9[port3], 0F
 07B                   dec_selected_4: 
 07B  0DC08                            TEST sC[state], 08[7seg_el4_port]
 07C  19801                            SUB s8[port4], 01
 07D  0380F                            AND s8[port4], 0F
 07E                          dec_end: 
 07E  000C0                            LOAD s0, sC[state]
 07F  20045                            CALL 045[update_pos]
 080  25000                            RETURN 
 081                       left_shift: 
 081  000C0                            LOAD s0, sC[state]
 082  20045                            CALL 045[update_pos]
 083  14C06                            SL0 sC[state]
 084  0DC10                            TEST sC[state], 10[00010000'b]
 085  32087                            JUMP Z, 087[left_shift_end]
 086  01C01                            LOAD sC[state], 01[7seg_el1_port]
 087                   left_shift_end: 
 087  05C80                            OR sC[state], 80[state_is_editing]
 088  25000                            RETURN 
 089                      right_shift: 
 089  000C0                            LOAD s0, sC[state]
 08A  20045                            CALL 045[update_pos]
 08B  14C0E                            SR0 sC[state]
 08C  3E08E                            JUMP NC, 08E[right_shift_end]
 08D  05C08                            OR sC[state], 08[7seg_el4_port]
 08E                  right_shift_end: 
 08E  07CC0                            XOR sC[state], C0[11000000'b]
 08F  25000                            RETURN 
 090                   blink_selected: 
 090  0DC80                            TEST sC[state], 80[state_is_editing]
 091  3A093                            JUMP C, 093[blink_on]
 092  25000                            RETURN 
 093                         blink_on: 
 093  11301                            ADD s3[blink_counter], 01
 094  0D380                            TEST s3[blink_counter], 80
 095  3A097                            JUMP C, 097[blink_end]
 096  01201                            LOAD s2, 01
 097                        blink_end: 
 097  000C0                            LOAD s0, sC[state]
 098  20045                            CALL 045[update_pos]
 099  01200                            LOAD s2, 00
 09A  25000                            RETURN 
 09B               has_button_changed: 
 09B  0C510                            TEST s5[button_dif], s1
 09C  25000                            RETURN 
 09D                 is_button_presed: 
 09D  0CE10                            TEST sE[buttons], s1
 09E  25000                            RETURN 
 09F               is_button_released: 
 09F  0CF10                            TEST sF[buttons_old], s1
 0A0  25000                            RETURN 
 0A1                        test_edit: 
 0A1  0DE08                            TEST sE[buttons], 08[00001000'b]                                  ;
 0A2  25000                            RETURN 
 0A3                        get_digit: 
 0A3  01000                            LOAD s0, 00[tablica'upper]
 0A4  011AC                            LOAD s1, AC[tablica'lower]
 0A5  1D200                            COMPARE s2, 00
 0A6  320A8                            JUMP Z, 0A8[get_digit_next]
 0A7                  get_digit_blink: 
 0A7  01710                            LOAD s7[selected_number], 10
 0A8                   get_digit_next: 
 0A8  10170                            ADD s1, s7[selected_number]
 0A9  13000                            ADDCY s0, 00
 0AA  24010                            CALL@ (s0, s1)
 0AB  25000                            RETURN 
 0AC                          tablica: 
 0AC  21603                            LOAD&RETURN s6[digit_number_7seg], 03[7_segment_decode#:00000011]
 0AD  2169F                            LOAD&RETURN s6[digit_number_7seg], 9F[7_segment_decode#:10011111]
 0AE  21625                            LOAD&RETURN s6[digit_number_7seg], 25[7_segment_decode#:00100101]
 0AF  2160D                            LOAD&RETURN s6[digit_number_7seg], 0D[7_segment_decode#:00001101]
 0B0  21699                            LOAD&RETURN s6[digit_number_7seg], 99[7_segment_decode#:10011001]
 0B1  21649                            LOAD&RETURN s6[digit_number_7seg], 49[7_segment_decode#:01001001]
 0B2  21641                            LOAD&RETURN s6[digit_number_7seg], 41[7_segment_decode#:01000001]
 0B3  2161F                            LOAD&RETURN s6[digit_number_7seg], 1F[7_segment_decode#:00011111]
 0B4  21601                            LOAD&RETURN s6[digit_number_7seg], 01[7_segment_decode#:00000001]
 0B5  21611                            LOAD&RETURN s6[digit_number_7seg], 11[7_segment_decode#:00010001]
 0B6  21609                            LOAD&RETURN s6[digit_number_7seg], 09[7_segment_decode#:00001001]
 0B7  216C1                            LOAD&RETURN s6[digit_number_7seg], C1[7_segment_decode#:11000001]
 0B8  21663                            LOAD&RETURN s6[digit_number_7seg], 63[7_segment_decode#:01100011]
 0B9  21685                            LOAD&RETURN s6[digit_number_7seg], 85[7_segment_decode#:10000101]
 0BA  21661                            LOAD&RETURN s6[digit_number_7seg], 61[7_segment_decode#:01100001]
 0BB  21671                            LOAD&RETURN s6[digit_number_7seg], 71[7_segment_decode#:01110001]
 0BC  216FF                            LOAD&RETURN s6[digit_number_7seg], FF[7_segment_decode#:11111111]
 0BD                                   ;// ; procedura opĂłĹşniajÄca (opĂłĹşnienie w s4)
 0BD                            delay: 
 0BD  19001                            SUB s0, 01
 0BE  360BD                            JUMP NZ, 0BD[delay]
 0BF  25000                            RETURN 


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

Z:\home\lukgla\Documents\GitHub\PG_ISP_VIVADO\pico\pblaze_6.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   18'd         
 timestamp_minutes 19'd         
 timestamp_seconds 51'd         
 datestamp_year    24'd         
 datestamp_month   4'd          
 datestamp_day     09'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 7seg_el1_port     00000001'b   pblaze_6.psm
 7seg_el2_port     00000010'b   pblaze_6.psm
 7seg_el3_port     00000100'b   pblaze_6.psm
 7seg_el4_port     00001000'b   pblaze_6.psm
 state_is_editing  10000000'b   pblaze_6.psm
 button_up         00000010'b   pblaze_6.psm
 button_down       00000001'b   pblaze_6.psm
 button_edit       00001000'b   pblaze_6.psm
 button_left       00001000'b   pblaze_6.psm
 button_right      00000100'b   pblaze_6.psm



List of defined tables

 TABLE name          Table                                                                                                                                                         Source PSM File

 7_segment_decode#   [00000011,10011111,00100101,00001101,10011001,01001001,01000001,00011111,00000001,00010001,00001001,11000001,01100011,10000101,01100001,01110001,11111111]'b  pblaze_6.psm



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "09 Apr 2024"  
 timestamp$        "18:19:51"     



List of line labels

   Label                      Addr  Source PSM File

 * reset                      001   pblaze_6.psm
   loop_main                  004   pblaze_6.psm
   delay_loop                 006   pblaze_6.psm
   scan_buttons               010   pblaze_6.psm
 * handle_button_change       014   pblaze_6.psm
 * handle_left                016   pblaze_6.psm
   handle_right               01C   pblaze_6.psm
   handle_button_up           022   pblaze_6.psm
   handle_button_up_pressed   02A   pblaze_6.psm
   up_released                02C   pblaze_6.psm
 * up_long                    02F   pblaze_6.psm
   up_short                   033   pblaze_6.psm
   handle_button_down         037   pblaze_6.psm
   down_pressed               041   pblaze_6.psm
   down_released              043   pblaze_6.psm
   update_pos                 045   pblaze_6.psm
 * update_pos_1               045   pblaze_6.psm
   update_pos_2               04B   pblaze_6.psm
   update_pos_3               051   pblaze_6.psm
   update_pos_4               057   pblaze_6.psm
   update_end                 05C   pblaze_6.psm
   inc_selected               05D   pblaze_6.psm
 * inc_selected_1             05D   pblaze_6.psm
   inc_selected_2             061   pblaze_6.psm
   inc_selected_3             065   pblaze_6.psm
   inc_selected_4             069   pblaze_6.psm
 * inc_end                    06C   pblaze_6.psm
   dec_selected               06F   pblaze_6.psm
 * dec_selected_1             06F   pblaze_6.psm
   dec_selected_2             073   pblaze_6.psm
   dec_selected_3             077   pblaze_6.psm
   dec_selected_4             07B   pblaze_6.psm
 * dec_end                    07E   pblaze_6.psm
   left_shift                 081   pblaze_6.psm
   left_shift_end             087   pblaze_6.psm
   right_shift                089   pblaze_6.psm
   right_shift_end            08E   pblaze_6.psm
   blink_selected             090   pblaze_6.psm
   blink_on                   093   pblaze_6.psm
   blink_end                  097   pblaze_6.psm
   has_button_changed         09B   pblaze_6.psm
   is_button_presed           09D   pblaze_6.psm
   is_button_released         09F   pblaze_6.psm
 * test_edit                  0A1   pblaze_6.psm
   get_digit                  0A3   pblaze_6.psm
 * get_digit_blink            0A7   pblaze_6.psm
   get_digit_next             0A8   pblaze_6.psm
   tablica                    0AC   pblaze_6.psm
   delay                      0BD   pblaze_6.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             28
 STAR              -

 AND               8
 OR                2
 XOR               3

 ADD               7
 ADDCY             1
 SUB               6
 SUBCY             -

 TEST             22
 TESTCY            -
 COMPARE           4
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               1
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             1
 OUTPUT            5
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             45
 JUMP@             -
 CALL             27
 CALL@             1
 RETURN           13
 LOAD&RETURN      17

 HWBUILD           -



End of KCPSM6 log file.
