KCPSM6 Assembler log file for program 'Z:\home\lukgla\Documents\GitHub\PG_ISP_VIVADO\pico\pblaze_6.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 09 Apr 2024
Assembly timestamp: 15:45:54

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 0BA hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 187
Memory locations available: 3909


Assembly listing

 Addr Code                             Instruction

 000                                   ;
 000                                   ; PiÄty program na Picoblaze
 000                                   ;
 000                                   TABLE 7_segment_decode#, [3F,06,5B,4F,66,6D,7D,07,7F,67,77,7C,39,5E,79,71,FF]
 000                                   CONSTANT 7seg_el1_port, 00000001'b
 000                                   CONSTANT 7seg_el2_port, 00000010'b
 000                                   CONSTANT 7seg_el3_port, 00000100'b
 000                                   CONSTANT 7seg_el4_port, 00001000'b
 000                                   CONSTANT state_is_editing, 10000000'b
 000                                   ; -- port is equal to which one is edited right now
 000                                   CONSTANT button_up, 00000010'b
 000                                   CONSTANT button_down, 00000001'b
 000                                   CONSTANT button_edit, 00001000'b
 000                                   CONSTANT button_left, 00001000'b
 000                                   CONSTANT button_right, 00000100'b
 000                                   NAMEREG sE, buttons
 000                                   NAMEREG sF, buttons_old
 000                                   NAMEREG sC, state
 000                                   ; -- internal representation of the number
 000                                   NAMEREG sA, port1
 000                                   NAMEREG sB, port2
 000                                   NAMEREG s9, port3
 000                                   NAMEREG s8, port4
 000                                   NAMEREG s7, selected_number
 000                                   NAMEREG s6, digit_number_7seg
 000                                   NAMEREG s5, button_dif
 000                                   NAMEREG s4, button_up_counter
 000                                   NAMEREG s3, blink_counter
 000  01C01                            LOAD sC[state], 01[7seg_el1_port]
 001                            reset: 
 001                                   ; reset digit to 0000
 001  01700                            LOAD s7[selected_number], 00
 002  2009E                            CALL 09E[get_digit]                                         ; load 0
 003  2D60F                            OUTPUT s6[digit_number_7seg], 0F[00001111'b]
 004                        loop_main: 
 004  00FE0                            LOAD sF[buttons_old], sE[buttons]
 005                                   ; delay
 005  011FF                            LOAD s1, FF
 006                       delay_loop: 
 006  010FF                            LOAD s0, FF
 007  200B8                            CALL 0B8[delay]
 008  1D100                            COMPARE s1, 00
 009  36006                            JUMP NZ, 006[delay_loop]
 00A                                   ; blink
 00A  2008B                            CALL 08B[blink_selected]
 00B                                   ; up clock if not zero with bound check
 00B  1D400                            COMPARE s4[button_up_counter], 00
 00C  32010                            JUMP Z, 010[scan_buttons]
 00D  1D4FF                            COMPARE s4[button_up_counter], FF
 00E  32010                            JUMP Z, 010[scan_buttons]
 00F  11401                            ADD s4[button_up_counter], 01
 010                     scan_buttons: 
 010  09E00                            INPUT sE[buttons], 00                                       ; read buttons
 011  005E0                            LOAD s5[button_dif], sE[buttons]
 012  065F0                            XOR s5[button_dif], sF[buttons_old]
 013  32004                            JUMP Z, 004[loop_main]
 014             handle_button_change: 
 014  0DC80                            TEST sC[state], 80[state_is_editing]
 015  32022                            JUMP Z, 022[handle_button_up]
 016                      handle_left: 
 016  01108                            LOAD s1, 08[button_left]
 017  20096                            CALL 096[has_button_changed]
 018  3201C                            JUMP Z, 01C[handle_right]
 019  20098                            CALL 098[is_button_presed]
 01A  3201C                            JUMP Z, 01C[handle_right]
 01B  20080                            CALL 080[left_shift]
 01C                     handle_right: 
 01C  01104                            LOAD s1, 04[button_right]
 01D  20096                            CALL 096[has_button_changed]
 01E  32022                            JUMP Z, 022[handle_button_up]
 01F  20098                            CALL 098[is_button_presed]
 020  32022                            JUMP Z, 022[handle_button_up]
 021  20086                            CALL 086[right_shift]
 022                 handle_button_up: 
 022  01102                            LOAD s1, 02[button_up]
 023  20096                            CALL 096[has_button_changed]
 024  32036                            JUMP Z, 036[handle_button_down]
 025  20098                            CALL 098[is_button_presed]
 026  3A02A                            JUMP C, 02A[handle_button_up_pressed]
 027  2009A                            CALL 09A[is_button_released]
 028  3A02C                            JUMP C, 02C[up_released]
 029  22036                            JUMP 036[handle_button_down]
 02A         handle_button_up_pressed: 
 02A  01401                            LOAD s4[button_up_counter], 01
 02B  22036                            JUMP 036[handle_button_down]
 02C                      up_released: 
 02C  1D4FF                            COMPARE s4[button_up_counter], FF
 02D  36033                            JUMP NZ, 033[up_short]
 02E                          up_long: 
 02E  07C80                            XOR sC[state], 80[state_is_editing]
 02F  01400                            LOAD s4[button_up_counter], 00
 030  000C0                            LOAD s0, sC[state]
 031  20044                            CALL 044[update_pos]                                        ; reset to number blinking
 032  22036                            JUMP 036[handle_button_down]
 033                         up_short: 
 033  2005C                            CALL 05C[inc_selected]
 034  01400                            LOAD s4[button_up_counter], 00
 035  22036                            JUMP 036[handle_button_down]
 036               handle_button_down: 
 036  0DC80                            TEST sC[state], 80[state_is_editing]
 037  3A004                            JUMP C, 004[loop_main]
 038  01101                            LOAD s1, 01[button_down]
 039  20096                            CALL 096[has_button_changed]
 03A  32004                            JUMP Z, 004[loop_main]
 03B  20098                            CALL 098[is_button_presed]
 03C  3A040                            JUMP C, 040[down_pressed]
 03D  2009A                            CALL 09A[is_button_released]
 03E  3A042                            JUMP C, 042[down_released]
 03F  22004                            JUMP 004[loop_main]
 040                     down_pressed: 
 040  2006E                            CALL 06E[dec_selected]
 041  22036                            JUMP 036[handle_button_down]
 042                    down_released: 
 042  22036                            JUMP 036[handle_button_down]
 043  22004                            JUMP 004[loop_main]
 044                       update_pos: 
 044                     update_pos_1: 
 044  0D001                            TEST s0, 01
 045  3204A                            JUMP Z, 04A[update_pos_2]
 046  007A0                            LOAD s7[selected_number], sA[port1]
 047  2009E                            CALL 09E[get_digit]
 048  2D601                            OUTPUT s6[digit_number_7seg], 01[7seg_el1_port]
 049  2205B                            JUMP 05B[update_end]
 04A                     update_pos_2: 
 04A  0D002                            TEST s0, 02
 04B  32050                            JUMP Z, 050[update_pos_3]
 04C  007B0                            LOAD s7[selected_number], sB[port2]
 04D  2009E                            CALL 09E[get_digit]
 04E  2D602                            OUTPUT s6[digit_number_7seg], 02[7seg_el2_port]
 04F  2205B                            JUMP 05B[update_end]
 050                     update_pos_3: 
 050  0D004                            TEST s0, 04
 051  32056                            JUMP Z, 056[update_pos_4]
 052  00790                            LOAD s7[selected_number], s9[port3]
 053  2009E                            CALL 09E[get_digit]
 054  2D604                            OUTPUT s6[digit_number_7seg], 04[7seg_el3_port]
 055  2205B                            JUMP 05B[update_end]
 056                     update_pos_4: 
 056  0D008                            TEST s0, 08
 057  3205B                            JUMP Z, 05B[update_end]
 058  00780                            LOAD s7[selected_number], s8[port4]
 059  2009E                            CALL 09E[get_digit]
 05A  2D608                            OUTPUT s6[digit_number_7seg], 08[7seg_el4_port]
 05B                       update_end: 
 05B  25000                            RETURN 
 05C                     inc_selected: 
 05C                   inc_selected_1: 
 05C  0DC01                            TEST sC[state], 01[7seg_el1_port]
 05D  32060                            JUMP Z, 060[inc_selected_2]
 05E  11A01                            ADD sA[port1], 01
 05F  03A0F                            AND sA[port1], 0F
 060                   inc_selected_2: 
 060  0DC02                            TEST sC[state], 02[7seg_el2_port]
 061  32064                            JUMP Z, 064[inc_selected_3]
 062  11B01                            ADD sB[port2], 01
 063  03B0F                            AND sB[port2], 0F
 064                   inc_selected_3: 
 064  0DC04                            TEST sC[state], 04[7seg_el3_port]
 065  32068                            JUMP Z, 068[inc_selected_4]
 066  11901                            ADD s9[port3], 01
 067  0390F                            AND s9[port3], 0F
 068                   inc_selected_4: 
 068  0DC08                            TEST sC[state], 08[7seg_el4_port]
 069  11801                            ADD s8[port4], 01
 06A  0380F                            AND s8[port4], 0F
 06B                          inc_end: 
 06B  000C0                            LOAD s0, sC[state]
 06C  20044                            CALL 044[update_pos]
 06D  25000                            RETURN 
 06E                     dec_selected: 
 06E                   dec_selected_1: 
 06E  0DC01                            TEST sC[state], 01[7seg_el1_port]
 06F  32072                            JUMP Z, 072[dec_selected_2]
 070  19A01                            SUB sA[port1], 01
 071  03A0F                            AND sA[port1], 0F
 072                   dec_selected_2: 
 072  0DC02                            TEST sC[state], 02[7seg_el2_port]
 073  32076                            JUMP Z, 076[dec_selected_3]
 074  19B01                            SUB sB[port2], 01
 075  03B0F                            AND sB[port2], 0F
 076                   dec_selected_3: 
 076  0DC04                            TEST sC[state], 04[7seg_el3_port]
 077  3207A                            JUMP Z, 07A[dec_selected_4]
 078  19901                            SUB s9[port3], 01
 079  0390F                            AND s9[port3], 0F
 07A                   dec_selected_4: 
 07A  0DC08                            TEST sC[state], 08[7seg_el4_port]
 07B  19801                            SUB s8[port4], 01
 07C  0380F                            AND s8[port4], 0F
 07D                          dec_end: 
 07D  000C0                            LOAD s0, sC[state]
 07E  20044                            CALL 044[update_pos]
 07F  25000                            RETURN 
 080                       left_shift: 
 080  14C06                            SL0 sC[state]
 081  0DC10                            TEST sC[state], 10[00010000'b]
 082  32084                            JUMP Z, 084[left_shift_end]
 083  01C01                            LOAD sC[state], 01[7seg_el1_port]
 084                   left_shift_end: 
 084  05C80                            OR sC[state], 80[state_is_editing]
 085  25000                            RETURN 
 086                      right_shift: 
 086  14C0E                            SR0 sC[state]
 087  3E089                            JUMP NC, 089[right_shift_end]
 088  05C08                            OR sC[state], 08[7seg_el4_port]
 089                  right_shift_end: 
 089  07CC0                            XOR sC[state], C0[11000000'b]
 08A  25000                            RETURN 
 08B                   blink_selected: 
 08B  0DC80                            TEST sC[state], 80[state_is_editing]
 08C  3A08E                            JUMP C, 08E[blink_on]
 08D  25000                            RETURN 
 08E                         blink_on: 
 08E  11301                            ADD s3[blink_counter], 01
 08F  0D380                            TEST s3[blink_counter], 80
 090  3A092                            JUMP C, 092[blink_end]
 091  01201                            LOAD s2, 01
 092                        blink_end: 
 092  000C0                            LOAD s0, sC[state]
 093  20044                            CALL 044[update_pos]
 094  01200                            LOAD s2, 00
 095  25000                            RETURN 
 096               has_button_changed: 
 096  0C510                            TEST s5[button_dif], s1
 097  25000                            RETURN 
 098                 is_button_presed: 
 098  0CE10                            TEST sE[buttons], s1
 099  25000                            RETURN 
 09A               is_button_released: 
 09A  0CF10                            TEST sF[buttons_old], s1
 09B  25000                            RETURN 
 09C                        test_edit: 
 09C  0DE08                            TEST sE[buttons], 08[00001000'b]                            ;
 09D  25000                            RETURN 
 09E                        get_digit: 
 09E  01000                            LOAD s0, 00[tablica'upper]
 09F  011A7                            LOAD s1, A7[tablica'lower]
 0A0  1D200                            COMPARE s2, 00
 0A1  320A3                            JUMP Z, 0A3[get_digit_next]
 0A2                  get_digit_blink: 
 0A2  01710                            LOAD s7[selected_number], 10
 0A3                   get_digit_next: 
 0A3  10170                            ADD s1, s7[selected_number]
 0A4  13000                            ADDCY s0, 00
 0A5  24010                            CALL@ (s0, s1)
 0A6  25000                            RETURN 
 0A7                          tablica: 
 0A7  2163F                            LOAD&RETURN s6[digit_number_7seg], 3F[7_segment_decode#:3F]
 0A8  21606                            LOAD&RETURN s6[digit_number_7seg], 06[7_segment_decode#:06]
 0A9  2165B                            LOAD&RETURN s6[digit_number_7seg], 5B[7_segment_decode#:5B]
 0AA  2164F                            LOAD&RETURN s6[digit_number_7seg], 4F[7_segment_decode#:4F]
 0AB  21666                            LOAD&RETURN s6[digit_number_7seg], 66[7_segment_decode#:66]
 0AC  2166D                            LOAD&RETURN s6[digit_number_7seg], 6D[7_segment_decode#:6D]
 0AD  2167D                            LOAD&RETURN s6[digit_number_7seg], 7D[7_segment_decode#:7D]
 0AE  21607                            LOAD&RETURN s6[digit_number_7seg], 07[7_segment_decode#:07]
 0AF  2167F                            LOAD&RETURN s6[digit_number_7seg], 7F[7_segment_decode#:7F]
 0B0  21667                            LOAD&RETURN s6[digit_number_7seg], 67[7_segment_decode#:67]
 0B1  21677                            LOAD&RETURN s6[digit_number_7seg], 77[7_segment_decode#:77]
 0B2  2167C                            LOAD&RETURN s6[digit_number_7seg], 7C[7_segment_decode#:7C]
 0B3  21639                            LOAD&RETURN s6[digit_number_7seg], 39[7_segment_decode#:39]
 0B4  2165E                            LOAD&RETURN s6[digit_number_7seg], 5E[7_segment_decode#:5E]
 0B5  21679                            LOAD&RETURN s6[digit_number_7seg], 79[7_segment_decode#:79]
 0B6  21671                            LOAD&RETURN s6[digit_number_7seg], 71[7_segment_decode#:71]
 0B7  216FF                            LOAD&RETURN s6[digit_number_7seg], FF[7_segment_decode#:FF]
 0B8                                   ;// ; procedura opĂłĹşniajÄca (opĂłĹşnienie w s4)
 0B8                            delay: 
 0B8  19001                            SUB s0, 01
 0B9  360B8                            JUMP NZ, 0B8[delay]
 0BA  25000                            RETURN 


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

Z:\home\lukgla\Documents\GitHub\PG_ISP_VIVADO\pico\pblaze_6.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   15'd         
 timestamp_minutes 45'd         
 timestamp_seconds 54'd         
 datestamp_year    24'd         
 datestamp_month   4'd          
 datestamp_day     09'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 7seg_el1_port     00000001'b   pblaze_6.psm
 7seg_el2_port     00000010'b   pblaze_6.psm
 7seg_el3_port     00000100'b   pblaze_6.psm
 7seg_el4_port     00001000'b   pblaze_6.psm
 state_is_editing  10000000'b   pblaze_6.psm
 button_up         00000010'b   pblaze_6.psm
 button_down       00000001'b   pblaze_6.psm
 button_edit       00001000'b   pblaze_6.psm
 button_left       00001000'b   pblaze_6.psm
 button_right      00000100'b   pblaze_6.psm



List of defined tables

 TABLE name          Table                                                 Source PSM File

 7_segment_decode#   [3F,06,5B,4F,66,6D,7D,07,7F,67,77,7C,39,5E,79,71,FF]  pblaze_6.psm



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "09 Apr 2024"  
 timestamp$        "15:45:54"     



List of line labels

   Label                      Addr  Source PSM File

 * reset                      001   pblaze_6.psm
   loop_main                  004   pblaze_6.psm
   delay_loop                 006   pblaze_6.psm
   scan_buttons               010   pblaze_6.psm
 * handle_button_change       014   pblaze_6.psm
 * handle_left                016   pblaze_6.psm
   handle_right               01C   pblaze_6.psm
   handle_button_up           022   pblaze_6.psm
   handle_button_up_pressed   02A   pblaze_6.psm
   up_released                02C   pblaze_6.psm
 * up_long                    02E   pblaze_6.psm
   up_short                   033   pblaze_6.psm
   handle_button_down         036   pblaze_6.psm
   down_pressed               040   pblaze_6.psm
   down_released              042   pblaze_6.psm
   update_pos                 044   pblaze_6.psm
 * update_pos_1               044   pblaze_6.psm
   update_pos_2               04A   pblaze_6.psm
   update_pos_3               050   pblaze_6.psm
   update_pos_4               056   pblaze_6.psm
   update_end                 05B   pblaze_6.psm
   inc_selected               05C   pblaze_6.psm
 * inc_selected_1             05C   pblaze_6.psm
   inc_selected_2             060   pblaze_6.psm
   inc_selected_3             064   pblaze_6.psm
   inc_selected_4             068   pblaze_6.psm
 * inc_end                    06B   pblaze_6.psm
   dec_selected               06E   pblaze_6.psm
 * dec_selected_1             06E   pblaze_6.psm
   dec_selected_2             072   pblaze_6.psm
   dec_selected_3             076   pblaze_6.psm
   dec_selected_4             07A   pblaze_6.psm
 * dec_end                    07D   pblaze_6.psm
   left_shift                 080   pblaze_6.psm
   left_shift_end             084   pblaze_6.psm
   right_shift                086   pblaze_6.psm
   right_shift_end            089   pblaze_6.psm
   blink_selected             08B   pblaze_6.psm
   blink_on                   08E   pblaze_6.psm
   blink_end                  092   pblaze_6.psm
   has_button_changed         096   pblaze_6.psm
   is_button_presed           098   pblaze_6.psm
   is_button_released         09A   pblaze_6.psm
 * test_edit                  09C   pblaze_6.psm
   get_digit                  09E   pblaze_6.psm
 * get_digit_blink            0A2   pblaze_6.psm
   get_digit_next             0A3   pblaze_6.psm
   tablica                    0A7   pblaze_6.psm
   delay                      0B8   pblaze_6.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             27
 STAR              -

 AND               8
 OR                2
 XOR               3

 ADD               7
 ADDCY             1
 SUB               5
 SUBCY             -

 TEST             21
 TESTCY            -
 COMPARE           5
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               1
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             1
 OUTPUT            5
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             44
 JUMP@             -
 CALL             25
 CALL@             1
 RETURN           13
 LOAD&RETURN      17

 HWBUILD           -



End of KCPSM6 log file.
