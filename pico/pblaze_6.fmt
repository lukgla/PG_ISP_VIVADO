                          ;
                          ; PiÄty program na Picoblaze
                          ;
                          TABLE 7_segment_decode#, [3F,06,5B,4F,66,6D,7D,07,7F,6F,FF]
                          CONSTANT 7seg_el1_port, 00000001'b
                          CONSTANT 7seg_el2_port, 00000010'b
                          CONSTANT 7seg_el3_port, 00000100'b
                          CONSTANT 7seg_el4_port, 00001000'b
                          CONSTANT state_is_editing, 10000000'b
                          ; -- port is equal to which one is edited right now
                          CONSTANT button_up, 00000010'b
                          CONSTANT button_down, 00000001'b
                          CONSTANT button_edit, 00001000'b
                          CONSTANT button_left, 00001000'b
                          CONSTANT button_right, 00000100'b
                          NAMEREG sE, buttons
                          NAMEREG sF, buttons_old
                          NAMEREG sC, state
                          ; -- internal representation of the number
                          NAMEREG sA, port1
                          NAMEREG sB, port2
                          NAMEREG s9, port3
                          NAMEREG s8, port4
                          NAMEREG s7, selected_number
                          NAMEREG s6, digit_number_7seg
                          NAMEREG s5, button_dif
                          NAMEREG s4, button_up_counter
                          NAMEREG s3, blink_counter
                          LOAD state, 7seg_el1_port
                   reset: 
                          ; reset digit to 0000
                          LOAD selected_number, 00
                          CALL get_digit                                   ; load 0
                          OUTPUT digit_number_7seg, 00001111'b
               loop_main: 
                          LOAD buttons_old, buttons
                          ; blink
                          CALL blink_selected
                          ; up clock if not zero with bound check
                          COMPARE button_up_counter, 00
                          JUMP Z, scan_buttons
                          COMPARE button_up_counter, FF
                          JUMP Z, scan_buttons
                          ADD button_up_counter, 01
            scan_buttons: 
                          INPUT buttons, 00                                ; read buttons
                          LOAD button_dif, buttons
                          XOR button_dif, buttons_old
                          JUMP Z, loop_main
    handle_button_change: 
                          TEST state, state_is_editing
                          JUMP Z, handle_button_up
             handle_left: 
                          LOAD s1, button_left
                          CALL has_button_changed
                          JUMP Z, handle_right
                          CALL is_button_presed
                          JUMP Z, handle_right
                          CALL left_shift
            handle_right: 
                          LOAD s1, button_right
                          CALL has_button_changed
                          JUMP Z, handle_button_up
                          CALL is_button_presed
                          JUMP Z, handle_button_up
                          CALL right_shift
        handle_button_up: 
                          LOAD s1, button_up
                          CALL has_button_changed
                          JUMP Z, handle_button_down
                          CALL is_button_presed
                          JUMP C, handle_button_up_pressed
                          CALL is_button_released
                          JUMP C, handle_button_up_pressed
                          JUMP handle_button_down
handle_button_up_pressed: 
                          LOAD button_up_counter, 01
                          JUMP handle_button_down
             up_released: 
                          COMPARE button_up_counter, FF
                          JUMP Z, up_short
                 up_long: 
                          XOR state, state_is_editing
                          LOAD button_up_counter, 00
                          LOAD s0, state
                          CALL update_pos                                  ; reset to number blinking
                          JUMP handle_button_down
                up_short: 
                          CALL inc_selected
                          LOAD button_up_counter, 00
                          JUMP handle_button_down
      handle_button_down: 
                          TEST state, state_is_editing
                          JUMP C, loop_main
                          LOAD s1, button_down
                          CALL has_button_changed
                          JUMP Z, loop_main
                          CALL is_button_presed
                          JUMP C, down_pressed
                          CALL is_button_released
                          JUMP C, down_released
                          JUMP loop_main
            down_pressed: 
                          CALL dec_selected
                          JUMP handle_button_down
           down_released: 
                          JUMP handle_button_down
                          JUMP loop_main
              update_pos: 
            update_pos_1: 
                          TEST s0, 01
                          JUMP Z, update_pos_2
                          LOAD selected_number, port1
                          CALL get_digit
                          OUTPUT digit_number_7seg, 7seg_el1_port
                          JUMP update_end
            update_pos_2: 
                          TEST s0, 02
                          JUMP Z, update_pos_3
                          LOAD selected_number, port2
                          CALL get_digit
                          OUTPUT digit_number_7seg, 7seg_el2_port
                          JUMP update_end
            update_pos_3: 
                          TEST s0, 04
                          JUMP Z, update_pos_4
                          LOAD selected_number, port3
                          CALL get_digit
                          OUTPUT digit_number_7seg, 7seg_el3_port
                          JUMP update_end
            update_pos_4: 
                          TEST s0, 08
                          JUMP Z, update_end
                          LOAD selected_number, port4
                          CALL get_digit
                          OUTPUT digit_number_7seg, 7seg_el4_port
              update_end: 
                          RETURN 
            inc_selected: 
          inc_selected_1: 
                          TEST state, 7seg_el1_port
                          JUMP Z, inc_selected_2
                          ADD port1, 01
                          AND port1, 0F
          inc_selected_2: 
                          TEST state, 7seg_el2_port
                          JUMP Z, inc_selected_3
                          ADD port2, 01
                          AND port2, 0F
          inc_selected_3: 
                          TEST state, 7seg_el3_port
                          JUMP Z, inc_selected_4
                          ADD port3, 01
                          AND port3, 0F
          inc_selected_4: 
                          TEST state, 7seg_el4_port
                          ADD port4, 01
                          AND port4, 0F
                 inc_end: 
                          LOAD s0, state
                          CALL update_pos
                          RETURN 
            dec_selected: 
          dec_selected_1: 
                          TEST state, 7seg_el1_port
                          JUMP Z, dec_selected_2
                          SUB port1, 01
                          AND port1, 0F
          dec_selected_2: 
                          TEST state, 7seg_el2_port
                          JUMP Z, dec_selected_3
                          SUB port2, 01
                          AND port2, 0F
          dec_selected_3: 
                          TEST state, 7seg_el3_port
                          JUMP Z, dec_selected_4
                          SUB port3, 01
                          AND port3, 0F
          dec_selected_4: 
                          TEST state, 7seg_el4_port
                          SUB port4, 01
                          AND port4, 0F
                 dec_end: 
                          LOAD s0, state
                          CALL update_pos
                          RETURN 
              left_shift: 
                          SL0 state
                          TEST state, 00010000'b
                          JUMP Z, left_shift_end
                          LOAD state, 7seg_el1_port
          left_shift_end: 
                          OR state, state_is_editing
                          RETURN 
             right_shift: 
                          SR0 state
                          JUMP NC, right_shift_end
                          OR state, 7seg_el4_port
         right_shift_end: 
                          XOR state, 11000000'b
                          RETURN 
          blink_selected: 
                          TEST state, state_is_editing
                          JUMP C, blink_on
                          RETURN 
                blink_on: 
                          TEST blink_counter, 10
                          JUMP C, blink_end
                          LOAD s2, 01
               blink_end: 
                          LOAD s0, state
                          CALL update_pos
                          LOAD s2, 00
                          RETURN 
      has_button_changed: 
                          TEST button_dif, s1
                          RETURN 
        is_button_presed: 
                          TEST buttons, s1
                          RETURN 
      is_button_released: 
                          TEST buttons_old, s1
                          RETURN 
               test_edit: 
                          TEST buttons, 00001000'b                         ;
                          RETURN 
               get_digit: 
                          LOAD s0, tablica'upper
                          LOAD s1, tablica'lower
                          COMPARE s2, 00
                          JUMP Z, get_digit_next
         get_digit_blink: 
                          LOAD selected_number, 10
          get_digit_next: 
                          ADD s1, selected_number
                          ADDCY s0, 00
                          CALL@ (s0, s1)
                          RETURN 
                 tablica: 
                          LOAD&RETURN digit_number_7seg, 7_segment_decode#
                          ;// ; procedura opĂłĹşniajÄca (opĂłĹşnienie w s4)
                          ;// delay:
                          ;//  LOAD se, s4
                          ;// delay_1:
                          ;//  LOAD sf, 00
                          ;// delay_2:
                          ;//  SUB sf, 01
                          ;//  JUMP NZ, delay_2
                          ;//  SUB se, 01
                          ;//  JUMP NZ, delay_1
                          ;//  RETURN
